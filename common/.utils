# utility functions

nvm() {
  # nvm lazyload
  if [ -d "$HOME/.nvm" ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    command nvm "$@"
  else
    echo "nvm is not installed" >&2
    return 1
  fi
}

proxy() {
    local action="set"
    local proxy_server_http="http://127.0.0.1:7890"
    local proxy_server_socks="socks5://127.0.0.1:7890"
    local check_url="https://www.google.com"
    local test_timeout=10

    # Show help
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        echo "Usage: proxy [OPTIONS] [PROXY_URL]"
        echo
        echo "Options:"
        echo "  -s, --set     Set proxy (default)"
        echo "  -u, --unset   Unset proxy"
        echo "  -c, --check   Check proxy status"
        echo "  -h, --help    Show this help message"
        echo
        echo "Default proxy settings:"
        echo "  HTTP/HTTPS: $proxy_server_http"
        echo "  SOCKS5:     $proxy_server_socks"
        return 0
    fi

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--unset)
                action="unset"
                shift
                ;;
            -c|--check)
                action="check"
                shift
                ;;
            -s|--set)
                action="set"
                shift
                ;;
            *)
                if [[ "$action" == "set" ]]; then
                    proxy_server_http="$1"
                    proxy_server_socks="$1"
                else
                    echo "Invalid argument: $1" >&2
                    return 1
                fi
                shift
                ;;
        esac
    done

    case "$action" in
        set)
            export http_proxy="$proxy_server_http"
            export https_proxy="$proxy_server_http"
            export all_proxy="$proxy_server_socks"
            echo "Proxy set to:"
            echo "  HTTP/HTTPS: $proxy_server_http"
            echo "  SOCKS5:     $proxy_server_socks"
            ;;
        unset)
            unset http_proxy https_proxy all_proxy
            echo "Proxy settings cleared"
            ;;
        check)
            if [[ -z "$http_proxy" ]]; then
                echo "Proxy not configured"
                return 1
            fi

            echo -n "Checking proxy validity ($http_proxy)... "
            if curl -sfL -m "$test_timeout" -o /dev/null "$check_url" 2>/dev/null; then
                echo "Success"
                return 0
            else
                echo "Failed"
                return 1
            fi
            ;;
    esac
}

